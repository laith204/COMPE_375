
lab 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000186  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001da  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000991  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e5  00000000  00000000  00000c05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  000014ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001800  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000448  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
   c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  10:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  14:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  18:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  1c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  20:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  24:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  28:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  2c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  30:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  34:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  38:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  3c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  40:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  44:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  48:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  4c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  50:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  54:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  58:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  5c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  60:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  68:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  6c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  70:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  78:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  7c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  80:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  84:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  88:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  8c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  90:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  98:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  9c:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a4:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  a8:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  ac:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>
  b0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 73 00 	call	0xe6	; 0xe6 <main>
  c4:	0c 94 c1 00 	jmp	0x182	; 0x182 <_exit>

000000c8 <__bad_interrupt>:
  c8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000cc <pwm>:
#define LEDON PORTB |= (1<<5)
#define LEDOFF PORTB &= ~(1<<5)


void pwm(){
	TCCR0B |= (1<<2);
  cc:	85 b5       	in	r24, 0x25	; 37
  ce:	84 60       	ori	r24, 0x04	; 4
  d0:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<0); //makes ps = 1024, 16384us per cycle = 0.016384s
  d2:	85 b5       	in	r24, 0x25	; 37
  d4:	81 60       	ori	r24, 0x01	; 1
  d6:	85 bd       	out	0x25, r24	; 37
	TCCR0A |= (1<<1); //turns ctc mode on in timer 0.
  d8:	84 b5       	in	r24, 0x24	; 36
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	84 bd       	out	0x24, r24	; 36
	OCR0A  = 156;	  //
  de:	8c e9       	ldi	r24, 0x9C	; 156
  e0:	87 bd       	out	0x27, r24	; 39
	OCR0B = 0; 
  e2:	18 bc       	out	0x28, r1	; 40
  e4:	08 95       	ret

000000e6 <main>:
}

int main(void)
{
    DDRB &= ~(1<<7); //turns pin 7 into an input
  e6:	84 b1       	in	r24, 0x04	; 4
  e8:	8f 77       	andi	r24, 0x7F	; 127
  ea:	84 b9       	out	0x04, r24	; 4
	DDRB |= (1<<5); //turns the led ouput port on 
  ec:	84 b1       	in	r24, 0x04	; 4
  ee:	80 62       	ori	r24, 0x20	; 32
  f0:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~(1<<7); //turns off pull up resistor on pin 7 port b... the switch is connected to ground when depressed
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 77       	andi	r24, 0x7F	; 127
  f6:	85 b9       	out	0x05, r24	; 5
	pwm();
  f8:	0e 94 66 00 	call	0xcc	; 0xcc <pwm>
    while (1) 
    {
		if (!(PINB & 1<<7)){ //checks if the button is pressed
  fc:	1f 99       	sbic	0x03, 7	; 3
  fe:	2a c0       	rjmp	.+84     	; 0x154 <main+0x6e>
				if (OCR0B < (OCR0A-1)){
 100:	28 b5       	in	r18, 0x28	; 40
 102:	30 e0       	ldi	r19, 0x00	; 0
 104:	87 b5       	in	r24, 0x27	; 39
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	28 17       	cp	r18, r24
 10c:	39 07       	cpc	r19, r25
 10e:	5c f4       	brge	.+22     	; 0x126 <main+0x40>
					OCR0B++;
 110:	88 b5       	in	r24, 0x28	; 40
 112:	8f 5f       	subi	r24, 0xFF	; 255
 114:	88 bd       	out	0x28, r24	; 40
					LEDON;
 116:	85 b1       	in	r24, 0x05	; 5
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	85 b9       	out	0x05, r24	; 5
					while ( !(TIFR0 & (1 << OCF0B) )){} // wait for OCR0B overflow event
 11c:	aa 9b       	sbis	0x15, 2	; 21
 11e:	fe cf       	rjmp	.-4      	; 0x11c <main+0x36>
					TIFR0 |= (1 << OCF0B); // reset OCR0B overflow flag
 120:	85 b3       	in	r24, 0x15	; 21
 122:	84 60       	ori	r24, 0x04	; 4
 124:	85 bb       	out	0x15, r24	; 21
				}
				if(OCR0B == (OCR0A-1)){
 126:	28 b5       	in	r18, 0x28	; 40
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	87 b5       	in	r24, 0x27	; 39
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	28 17       	cp	r18, r24
 132:	39 07       	cpc	r19, r25
 134:	31 f4       	brne	.+12     	; 0x142 <main+0x5c>
					LEDON;
 136:	85 b1       	in	r24, 0x05	; 5
 138:	80 62       	ori	r24, 0x20	; 32
 13a:	85 b9       	out	0x05, r24	; 5
					while(!(PINB & 1<<7)){}
 13c:	1f 9b       	sbis	0x03, 7	; 3
 13e:	fe cf       	rjmp	.-4      	; 0x13c <main+0x56>
 140:	dd cf       	rjmp	.-70     	; 0xfc <main+0x16>
				} else {
					LEDOFF;
 142:	85 b1       	in	r24, 0x05	; 5
 144:	8f 7d       	andi	r24, 0xDF	; 223
 146:	85 b9       	out	0x05, r24	; 5
					while ( !(TIFR0 & (1 << OCF0A) )){} //waits for overflow event
 148:	a9 9b       	sbis	0x15, 1	; 21
 14a:	fe cf       	rjmp	.-4      	; 0x148 <main+0x62>
					TIFR0 |= (1 << OCF0A); // reset the overflow flag
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	85 bb       	out	0x15, r24	; 21
 152:	d4 cf       	rjmp	.-88     	; 0xfc <main+0x16>
				}
		} else {
				if (OCR0B > 0){
 154:	88 b5       	in	r24, 0x28	; 40
 156:	88 23       	and	r24, r24
 158:	89 f2       	breq	.-94     	; 0xfc <main+0x16>
					OCR0B--;
 15a:	88 b5       	in	r24, 0x28	; 40
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	88 bd       	out	0x28, r24	; 40
					LEDON;
 160:	85 b1       	in	r24, 0x05	; 5
 162:	80 62       	ori	r24, 0x20	; 32
 164:	85 b9       	out	0x05, r24	; 5
					while ( (TIFR0 & (1 << OCF0B) ) == 0){} // wait for OCR0B overflow event
 166:	aa 9b       	sbis	0x15, 2	; 21
 168:	fe cf       	rjmp	.-4      	; 0x166 <main+0x80>
					TIFR0 |= (1 << OCF0B); // reset OCR0B overflow flag
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	84 60       	ori	r24, 0x04	; 4
 16e:	85 bb       	out	0x15, r24	; 21
					LEDOFF;
 170:	85 b1       	in	r24, 0x05	; 5
 172:	8f 7d       	andi	r24, 0xDF	; 223
 174:	85 b9       	out	0x05, r24	; 5
					while ( (TIFR0 & (1 << OCF0A) ) == 0){} //waits for overflow event
 176:	a9 9b       	sbis	0x15, 1	; 21
 178:	fe cf       	rjmp	.-4      	; 0x176 <main+0x90>
					TIFR0 |= (1 << OCF0A); // reset the overflow flag
 17a:	85 b3       	in	r24, 0x15	; 21
 17c:	82 60       	ori	r24, 0x02	; 2
 17e:	85 bb       	out	0x15, r24	; 21
 180:	bd cf       	rjmp	.-134    	; 0xfc <main+0x16>

00000182 <_exit>:
 182:	f8 94       	cli

00000184 <__stop_program>:
 184:	ff cf       	rjmp	.-2      	; 0x184 <__stop_program>
