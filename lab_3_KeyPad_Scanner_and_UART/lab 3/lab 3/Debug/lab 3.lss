
lab 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000001fc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a44  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000096f  00000000  00000000  00000d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032c  00000000  00000000  000016db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001a08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000476  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	ec ef       	ldi	r30, 0xFC	; 252
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 99 00 	call	0x132	; 0x132 <main>
  da:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <uart_init>:
#define BAUD 9600 // define baud
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1) // set baud rate

void uart_init (void)
{
	UBRR0H &= 0; //clears the register. not needed since its 0 from the start
  e2:	e5 ec       	ldi	r30, 0xC5	; 197
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	10 82       	st	Z, r1
	UBRR0H = (BAUDRATE>>8); // shift the register right by 8 bits
  ea:	10 82       	st	Z, r1
	// above line not needed for baud rate of 9600, and cpu frequency above of 16Mhz.
	UBRR0L = BAUDRATE; // set baud rate
  ec:	87 e6       	ldi	r24, 0x67	; 103
  ee:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B|= (1<<TXEN0); // enable transmitter
  f2:	e1 ec       	ldi	r30, 0xC1	; 193
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 60       	ori	r24, 0x08	; 8
  fa:	80 83       	st	Z, r24
	UCSR0C|= (1<<UCSZ00)|(1<<UCSZ01); // 8bit data format
  fc:	e2 ec       	ldi	r30, 0xC2	; 194
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	86 60       	ori	r24, 0x06	; 6
 104:	80 83       	st	Z, r24
	UCSR0C &= ~(1<<4)|~(1<<5); //no parity, when bits 4 and 5 are 0, parity is disabled
 106:	80 81       	ld	r24, Z
 108:	80 83       	st	Z, r24
	//above 2 lines not needed because they start at 0 parity, and it is set at 8 bits //automatically.
	UCSR0C &= ~(1<<USBS0) | (1<<USBS1); //sets stop bits to 1 only… usbs = 0 now.. 0 = 1 stop bit
 10a:	80 81       	ld	r24, Z
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret

00000110 <uart_transmit>:
	//dont need above line because it starts off at 0.. Dont have to manually set it.
}

void uart_transmit (unsigned char data) {
	while (!( UCSR0A & (1<<5))){}; // wait while register is free
 110:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 114:	95 ff       	sbrs	r25, 5
 116:	fc cf       	rjmp	.-8      	; 0x110 <uart_transmit>
	UDR0 = data; // load data in the register
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 11c:	08 95       	ret

0000011e <port_init>:
}

void port_init(){
	DDRD |= 0xF0; //turns bits 4-7 to 1 (outputs)
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	80 6f       	ori	r24, 0xF0	; 240
 122:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xF0; //turns bits 0-3 to 0. (inputs)
 124:	84 b1       	in	r24, 0x04	; 4
 126:	80 7f       	andi	r24, 0xF0	; 240
 128:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x0F;//turns pull up resistor on the chosen input bits (0-3).
 12a:	85 b1       	in	r24, 0x05	; 5
 12c:	8f 60       	ori	r24, 0x0F	; 15
 12e:	85 b9       	out	0x05, r24	; 5
 130:	08 95       	ret

00000132 <main>:
}

int main(void)
{
 132:	cf 93       	push	r28
 134:	df 93       	push	r29
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	60 97       	sbiw	r28, 0x10	; 16
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
	port_init(); //initializes the ports
 146:	0e 94 8f 00 	call	0x11e	; 0x11e <port_init>
	uart_init(); //initializes the usart protocol values
 14a:	0e 94 71 00 	call	0xe2	; 0xe2 <uart_init>
	char keyPad[4][4] = {
 14e:	80 e1       	ldi	r24, 0x10	; 16
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	f1 e0       	ldi	r31, 0x01	; 1
 154:	de 01       	movw	r26, r28
 156:	11 96       	adiw	r26, 0x01	; 1
 158:	01 90       	ld	r0, Z+
 15a:	0d 92       	st	X+, r0
 15c:	8a 95       	dec	r24
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x26>
		{'B', '6', '5', '4'},
		{'A', '3', '2', '1'}
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 160:	68 94       	set
 162:	cc 24       	eor	r12, r12
 164:	c2 f8       	bld	r12, 2
 166:	d1 2c       	mov	r13, r1
 168:	41 c0       	rjmp	.+130    	; 0x1ec <main+0xba>
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
 16a:	8b b1       	in	r24, 0x0b	; 11
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	79 01       	movw	r14, r18
 172:	0c 2c       	mov	r0, r12
 174:	02 c0       	rjmp	.+4      	; 0x17a <main+0x48>
 176:	ee 0c       	add	r14, r14
 178:	ff 1c       	adc	r15, r15
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <main+0x44>
 17e:	9e 2d       	mov	r25, r14
 180:	90 95       	com	r25
 182:	89 23       	and	r24, r25
 184:	8b b9       	out	0x0b, r24	; 11
			for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	27 c0       	rjmp	.+78     	; 0x1da <main+0xa8>
				if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
 18c:	83 b1       	in	r24, 0x03	; 3
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	00 2e       	mov	r0, r16
 192:	02 c0       	rjmp	.+4      	; 0x198 <main+0x66>
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	0a 94       	dec	r0
 19a:	e2 f7       	brpl	.-8      	; 0x194 <main+0x62>
 19c:	80 fd       	sbrc	r24, 0
 19e:	1b c0       	rjmp	.+54     	; 0x1d6 <main+0xa4>
					uart_transmit(keyPad[(i-4)][j]); //transmits the keypad button that is pressed
 1a0:	f6 01       	movw	r30, r12
 1a2:	34 97       	sbiw	r30, 0x04	; 4
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8c 0f       	add	r24, r28
 1b2:	9d 1f       	adc	r25, r29
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	e0 0f       	add	r30, r16
 1ba:	f1 1f       	adc	r31, r17
 1bc:	80 81       	ld	r24, Z
 1be:	0e 94 88 00 	call	0x110	; 0x110 <uart_transmit>
					while(!(PINB & (1<<j))){} //busy while that will stop the program from moving on until the keypad button is released 
 1c2:	83 b1       	in	r24, 0x03	; 3
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	00 2e       	mov	r0, r16
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <main+0x9c>
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	0a 94       	dec	r0
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <main+0x98>
 1d2:	80 ff       	sbrs	r24, 0
 1d4:	f6 cf       	rjmp	.-20     	; 0x1c2 <main+0x90>
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
			for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 1d6:	0f 5f       	subi	r16, 0xFF	; 255
 1d8:	1f 4f       	sbci	r17, 0xFF	; 255
 1da:	04 30       	cpi	r16, 0x04	; 4
 1dc:	11 05       	cpc	r17, r1
 1de:	b4 f2       	brlt	.-84     	; 0x18c <main+0x5a>
				if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
					uart_transmit(keyPad[(i-4)][j]); //transmits the keypad button that is pressed
					while(!(PINB & (1<<j))){} //busy while that will stop the program from moving on until the keypad button is released 
				}
			}
			PORTD |= (1<<i); // sets that row that was set to logic 0 back to logic 1 so it can then check another row
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	e8 2a       	or	r14, r24
 1e4:	eb b8       	out	0x0b, r14	; 11
		{'B', '6', '5', '4'},
		{'A', '3', '2', '1'}
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 1e6:	9f ef       	ldi	r25, 0xFF	; 255
 1e8:	c9 1a       	sub	r12, r25
 1ea:	d9 0a       	sbc	r13, r25
 1ec:	88 e0       	ldi	r24, 0x08	; 8
 1ee:	c8 16       	cp	r12, r24
 1f0:	d1 04       	cpc	r13, r1
 1f2:	0c f4       	brge	.+2      	; 0x1f6 <main+0xc4>
 1f4:	ba cf       	rjmp	.-140    	; 0x16a <main+0x38>
 1f6:	b4 cf       	rjmp	.-152    	; 0x160 <main+0x2e>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
