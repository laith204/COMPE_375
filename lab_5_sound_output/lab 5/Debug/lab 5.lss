
lab 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000202  00000276  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000202  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a95  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098d  00000000  00000000  00000dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034a  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000471  00000000  00000000  00001b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d4  00000000  00000000  00001f71  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  68:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  6c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  70:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  74:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  78:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  7c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  80:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  84:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  88:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  8c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  90:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  94:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  98:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  9c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  a8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  ac:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  b0:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e2 e0       	ldi	r30, 0x02	; 2
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>
  d6:	0e 94 b1 00 	call	0x162	; 0x162 <main>
  da:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <port_init>:
#define BAUD 9600 // define baud
#define BAUDRATE ((F_CPU)/(BAUD*16UL)-1) // set baud rate


void port_init(){
	DDRD |= 0xF0; //turns bits 4-7 to 1 (outputs)
  e2:	8a b1       	in	r24, 0x0a	; 10
  e4:	80 6f       	ori	r24, 0xF0	; 240
  e6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xF0; //turns bits 0-3 to 0. (inputs)
  e8:	84 b1       	in	r24, 0x04	; 4
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x0F;//turns pull up resistor on the chosen input bits (0-3).
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 60       	ori	r24, 0x0F	; 15
  f2:	85 b9       	out	0x05, r24	; 5
	DDRC |= 0x10; //turns bit 4, port c to output. 
  f4:	3c 9a       	sbi	0x07, 4	; 7
  f6:	08 95       	ret

000000f8 <Ton>:
}

uint8_t Ton(int x, int y){
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	cd b7       	in	r28, 0x3d	; 61
  fe:	de b7       	in	r29, 0x3e	; 62
 100:	60 97       	sbiw	r28, 0x10	; 16
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
	 uint8_t Ton1[4][4] = { //values for OCR0A in steps - 1.. calculated outside of this code.. 
 10c:	20 e1       	ldi	r18, 0x10	; 16
 10e:	e0 e0       	ldi	r30, 0x00	; 0
 110:	f1 e0       	ldi	r31, 0x01	; 1
 112:	de 01       	movw	r26, r28
 114:	11 96       	adiw	r26, 0x01	; 1
 116:	01 90       	ld	r0, Z+
 118:	0d 92       	st	X+, r0
 11a:	2a 95       	dec	r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <Ton+0x1e>
		{70, 66, 62, 59},
		{55, 52, 49, 46},
		{43, 41, 39, 37},
		{35, 33, 31, 29}
	};
	return Ton1[x][y];
 11e:	88 0f       	add	r24, r24
 120:	99 1f       	adc	r25, r25
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	2c 0f       	add	r18, r28
 12c:	3d 1f       	adc	r19, r29
 12e:	82 0f       	add	r24, r18
 130:	93 1f       	adc	r25, r19
 132:	fc 01       	movw	r30, r24
 134:	e6 0f       	add	r30, r22
 136:	f7 1f       	adc	r31, r23
}
 138:	80 81       	ld	r24, Z
 13a:	60 96       	adiw	r28, 0x10	; 16
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	f8 94       	cli
 140:	de bf       	out	0x3e, r29	; 62
 142:	0f be       	out	0x3f, r0	; 63
 144:	cd bf       	out	0x3d, r28	; 61
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <timer_init>:

 
void timer_init(){
	TCCR0A |= (1<<WGM01); //turns ctc mode on
 14c:	84 b5       	in	r24, 0x24	; 36
 14e:	82 60       	ori	r24, 0x02	; 2
 150:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00); //prescaler = 1024.. 
 152:	85 b5       	in	r24, 0x25	; 37
 154:	85 60       	ori	r24, 0x05	; 5
 156:	85 bd       	out	0x25, r24	; 37
	OCR0A = 70; //71 steps with ps = 1024, = 45.45ms... 50% of this = ~23ms, max Ton 
 158:	86 e4       	ldi	r24, 0x46	; 70
 15a:	87 bd       	out	0x27, r24	; 39
	OCR0B = ((70 + 1) / 2) - 1; //50% duty cycle.. will be on for half a ms, off for the other half.. 
 15c:	82 e2       	ldi	r24, 0x22	; 34
 15e:	88 bd       	out	0x28, r24	; 40
 160:	08 95       	ret

00000162 <main>:
}

int main(void)
{
	port_init(); //initializes the ports
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <port_init>
	timer_init(); //initializes the timer
 166:	0e 94 a6 00 	call	0x14c	; 0x14c <timer_init>
		{'*', '0', '#', 'D'}
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
 16a:	cc 24       	eor	r12, r12
 16c:	c3 94       	inc	r12
 16e:	d1 2c       	mov	r13, r1
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 170:	68 94       	set
 172:	aa 24       	eor	r10, r10
 174:	a2 f8       	bld	r10, 2
 176:	b1 2c       	mov	r11, r1
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	86 01       	movw	r16, r12
 17c:	0a 2c       	mov	r0, r10
 17e:	02 c0       	rjmp	.+4      	; 0x184 <main+0x22>
 180:	00 0f       	add	r16, r16
 182:	11 1f       	adc	r17, r17
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <main+0x1e>
 188:	90 2f       	mov	r25, r16
 18a:	90 95       	com	r25
 18c:	89 23       	and	r24, r25
 18e:	8b b9       	out	0x0b, r24	; 11
			for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 190:	c0 e0       	ldi	r28, 0x00	; 0
 192:	d0 e0       	ldi	r29, 0x00	; 0
				if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
					uint8_t freq = Ton((i-4),j);
 194:	75 01       	movw	r14, r10
 196:	24 e0       	ldi	r18, 0x04	; 4
 198:	e2 1a       	sub	r14, r18
 19a:	f1 08       	sbc	r15, r1
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
			for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
				if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
 19c:	83 b1       	in	r24, 0x03	; 3
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0c 2e       	mov	r0, r28
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <main+0x46>
 1a4:	95 95       	asr	r25
 1a6:	87 95       	ror	r24
 1a8:	0a 94       	dec	r0
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <main+0x42>
 1ac:	80 fd       	sbrc	r24, 0
 1ae:	10 c0       	rjmp	.+32     	; 0x1d0 <main+0x6e>
					uint8_t freq = Ton((i-4),j);
 1b0:	be 01       	movw	r22, r28
 1b2:	c7 01       	movw	r24, r14
 1b4:	0e 94 7c 00 	call	0xf8	; 0xf8 <Ton>
					OCR0A = freq;
 1b8:	87 bd       	out	0x27, r24	; 39
					OCR0B = ((freq + 1) / 2) - 1; //50% duty cycle
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	9c 01       	movw	r18, r24
 1c0:	12 f4       	brpl	.+4      	; 0x1c6 <main+0x64>
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	3f 4f       	sbci	r19, 0xFF	; 255
 1c6:	35 95       	asr	r19
 1c8:	27 95       	ror	r18
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	28 bd       	out	0x28, r18	; 40
					//while(!(PINB & (1<<j))){} //busy while that will stop the program from moving on until the keypad button is released
					PORTB |= (1<<5);
 1ce:	2d 9a       	sbi	0x05, 5	; 5
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
			PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
			for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 1d0:	21 96       	adiw	r28, 0x01	; 1
 1d2:	c4 30       	cpi	r28, 0x04	; 4
 1d4:	d1 05       	cpc	r29, r1
 1d6:	11 f7       	brne	.-60     	; 0x19c <main+0x3a>
					OCR0B = ((freq + 1) / 2) - 1; //50% duty cycle
					//while(!(PINB & (1<<j))){} //busy while that will stop the program from moving on until the keypad button is released
					PORTB |= (1<<5);
				}
			}
			PORTD |= (1<<i); // sets that row that was set to logic 0 back to logic 1 so it can then check another row
 1d8:	8b b1       	in	r24, 0x0b	; 11
 1da:	08 2b       	or	r16, r24
 1dc:	0b b9       	out	0x0b, r16	; 11
		{'7', '8', '9', 'C'},
		{'*', '0', '#', 'D'}
	};
	int i, j;
	while(1){
		for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	a8 1a       	sub	r10, r24
 1e2:	b8 0a       	sbc	r11, r24
 1e4:	28 e0       	ldi	r18, 0x08	; 8
 1e6:	a2 16       	cp	r10, r18
 1e8:	b1 04       	cpc	r11, r1
 1ea:	31 f6       	brne	.-116    	; 0x178 <main+0x16>
					PORTB |= (1<<5);
				}
			}
			PORTD |= (1<<i); // sets that row that was set to logic 0 back to logic 1 so it can then check another row
		}
		PORTC |= (1<<4); //turns PORTC bit 4 to logic 1
 1ec:	44 9a       	sbi	0x08, 4	; 8
		while ( (TIFR0 & (1 << OCF0B) ) == 0){} // wait for OCR0B overflow event
 1ee:	aa 9b       	sbis	0x15, 2	; 21
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <main+0x8c>
		TIFR0 |= (1 << OCF0B); // reset OCR0B overflow flag
 1f2:	aa 9a       	sbi	0x15, 2	; 21
		PORTC &= ~(1<<4); //turns PORTC bit 4 to logic 0
 1f4:	44 98       	cbi	0x08, 4	; 8
		while ( (TIFR0 & (1 << OCF0A) ) == 0){} // wait for OCR0A overflow event
 1f6:	a9 9b       	sbis	0x15, 1	; 21
 1f8:	fe cf       	rjmp	.-4      	; 0x1f6 <main+0x94>
		TIFR0 |= (1 << OCF0A); // reset OCR0A overflow flag
 1fa:	a9 9a       	sbi	0x15, 1	; 21
	}
 1fc:	b9 cf       	rjmp	.-142    	; 0x170 <main+0xe>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>
