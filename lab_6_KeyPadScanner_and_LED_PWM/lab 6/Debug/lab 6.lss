
lab 6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000260  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000260  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800110  00800110  00000304  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a90  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  00000e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000399  00000000  00000000  000017bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001b54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000049d  00000000  00000000  00001c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  000020c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000220c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__vector_7>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 12 01 	jmp	0x224	; 0x224 <__vector_14>
  3c:	0c 94 07 01 	jmp	0x20e	; 0x20e <__vector_15>
  40:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 e6       	ldi	r30, 0x60	; 96
  c8:	f2 e0       	ldi	r31, 0x02	; 2
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a0 31       	cpi	r26, 0x10	; 16
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a0 e1       	ldi	r26, 0x10	; 16
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a1 31       	cpi	r26, 0x11	; 17
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  ea:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <port_init>:
#define LEDON  PORTB |= (1<<5);
#define LEDOFF PORTB &= ~(1<<5);

void port_init(){
	//keypad init
	DDRD |= 0xF0; //turns bits 4-7 to 1 (outputs)
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	80 6f       	ori	r24, 0xF0	; 240
  f6:	8a b9       	out	0x0a, r24	; 10
	DDRB &= 0xF0; //turns bits 0-3 to 0. (inputs)
  f8:	84 b1       	in	r24, 0x04	; 4
  fa:	80 7f       	andi	r24, 0xF0	; 240
  fc:	84 b9       	out	0x04, r24	; 4
	PORTB |= 0x0F;//turns pull up resistor on the chosen input bits (0-3).
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 60       	ori	r24, 0x0F	; 15
 102:	85 b9       	out	0x05, r24	; 5
	DDRC |= 0x10; //turns bit 4, port c to output.
 104:	3c 9a       	sbi	0x07, 4	; 7
	
	//led init
	DDRB |= (1<<5); //turns port b pin 5 to output mode
 106:	25 9a       	sbi	0x04, 5	; 4
 108:	08 95       	ret

0000010a <keypad_check>:
}

void keypad_check(){
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	cd b7       	in	r28, 0x3d	; 61
 114:	de b7       	in	r29, 0x3e	; 62
 116:	60 97       	sbiw	r28, 0x10	; 16
 118:	0f b6       	in	r0, 0x3f	; 63
 11a:	f8 94       	cli
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	0f be       	out	0x3f, r0	; 63
 120:	cd bf       	out	0x3d, r28	; 61
	int i, j;
	
	uint8_t Ton[4][4] = { //values for OCR0A in steps - 1.. calculated outside of this code..
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	e0 e0       	ldi	r30, 0x00	; 0
 126:	f1 e0       	ldi	r31, 0x01	; 1
 128:	de 01       	movw	r26, r28
 12a:	11 96       	adiw	r26, 0x01	; 1
 12c:	01 90       	ld	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	8a 95       	dec	r24
 132:	e1 f7       	brne	.-8      	; 0x12c <keypad_check+0x22>
 134:	de 01       	movw	r26, r28
 136:	11 96       	adiw	r26, 0x01	; 1
		{84, 105, 126, 126},
		{147, 168, 189, 189},
		{189, 189, 189, 189}
	};
	
	for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 138:	64 e0       	ldi	r22, 0x04	; 4
 13a:	70 e0       	ldi	r23, 0x00	; 0
		PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
 13c:	01 e0       	ldi	r16, 0x01	; 1
 13e:	10 e0       	ldi	r17, 0x00	; 0
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	a8 01       	movw	r20, r16
 144:	06 2e       	mov	r0, r22
 146:	02 c0       	rjmp	.+4      	; 0x14c <keypad_check+0x42>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <keypad_check+0x3e>
 150:	94 2f       	mov	r25, r20
 152:	90 95       	com	r25
 154:	89 23       	and	r24, r25
 156:	8b b9       	out	0x0b, r24	; 11
 158:	fd 01       	movw	r30, r26
		for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
			if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
 15e:	83 b1       	in	r24, 0x03	; 3
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	02 2e       	mov	r0, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <keypad_check+0x60>
 166:	95 95       	asr	r25
 168:	87 95       	ror	r24
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <keypad_check+0x5c>
 16e:	80 fd       	sbrc	r24, 0
 170:	03 c0       	rjmp	.+6      	; 0x178 <keypad_check+0x6e>
				OCR0B = Ton[i-4][j] - 1;
 172:	80 81       	ld	r24, Z
 174:	81 50       	subi	r24, 0x01	; 1
 176:	88 bd       	out	0x28, r24	; 40
		{189, 189, 189, 189}
	};
	
	for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
		PORTD &= ~(1<<i); //sets a single row to logic 0 to see if that row is pressed
		for (j = 0; j < 4; j++){ //j = columns, port b (0-3)
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	31 96       	adiw	r30, 0x01	; 1
 17e:	24 30       	cpi	r18, 0x04	; 4
 180:	31 05       	cpc	r19, r1
 182:	69 f7       	brne	.-38     	; 0x15e <keypad_check+0x54>
			if(!(PINB & (1<<j))){ //if that column reads a logic 0, that means the row and column switch (keypad button) is pressed
				OCR0B = Ton[i-4][j] - 1;
			}
		}
		PORTD |= (1<<i); // sets that row that was set to logic 0 back to logic 1 so it can then check another row
 184:	8b b1       	in	r24, 0x0b	; 11
 186:	48 2b       	or	r20, r24
 188:	4b b9       	out	0x0b, r20	; 11
		{84, 105, 126, 126},
		{147, 168, 189, 189},
		{189, 189, 189, 189}
	};
	
	for(i = 4; i < 8; i++){ // i = rows, port d (4-7)
 18a:	6f 5f       	subi	r22, 0xFF	; 255
 18c:	7f 4f       	sbci	r23, 0xFF	; 255
 18e:	14 96       	adiw	r26, 0x04	; 4
 190:	68 30       	cpi	r22, 0x08	; 8
 192:	71 05       	cpc	r23, r1
 194:	a9 f6       	brne	.-86     	; 0x140 <keypad_check+0x36>
				OCR0B = Ton[i-4][j] - 1;
			}
		}
		PORTD |= (1<<i); // sets that row that was set to logic 0 back to logic 1 so it can then check another row
	}
}
 196:	60 96       	adiw	r28, 0x10	; 16
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	f8 94       	cli
 19c:	de bf       	out	0x3e, r29	; 62
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	cd bf       	out	0x3d, r28	; 61
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <timer0_init>:

void timer0_init(){
	TCCR0A |= (1<<WGM01); //turns ctc mode on
 1ac:	84 b5       	in	r24, 0x24	; 36
 1ae:	82 60       	ori	r24, 0x02	; 2
 1b0:	84 bd       	out	0x24, r24	; 36
	
	OCR0A = 187; //3ms period
 1b2:	8b eb       	ldi	r24, 0xBB	; 187
 1b4:	87 bd       	out	0x27, r24	; 39
	TIMSK0 |= (1<<OCIE0A) | (1<<OCIE0B); //enables compare match a & b interrupts
 1b6:	ee e6       	ldi	r30, 0x6E	; 110
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	86 60       	ori	r24, 0x06	; 6
 1be:	80 83       	st	Z, r24
	
	TCCR0B |= (1 << CS02); //prescaler = 256.. and start timer
 1c0:	85 b5       	in	r24, 0x25	; 37
 1c2:	84 60       	ori	r24, 0x04	; 4
 1c4:	85 bd       	out	0x25, r24	; 37
 1c6:	08 95       	ret

000001c8 <timer2_init>:
//828440295
//period is 3ms... scans the keypad
//pwm frequency = 600HZ = 1.67ms

void timer2_init(){
	TCCR2A |= (1 << WGM21); //turns ctc mode on
 1c8:	e0 eb       	ldi	r30, 0xB0	; 176
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	82 60       	ori	r24, 0x02	; 2
 1d0:	80 83       	st	Z, r24
	
	OCR2A = 209; //1.672ms. as close as i can 
 1d2:	81 ed       	ldi	r24, 0xD1	; 209
 1d4:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	TIMSK2 |= (1 << OCIE2A); //enables compare match a interrupt
 1d8:	e0 e7       	ldi	r30, 0x70	; 112
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	80 83       	st	Z, r24
	
	TCCR2B |= (1 << CS22) | (1 << CS20); //prescaler = 128.. and start timer
 1e2:	e1 eb       	ldi	r30, 0xB1	; 177
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	85 60       	ori	r24, 0x05	; 5
 1ea:	80 83       	st	Z, r24
 1ec:	08 95       	ret

000001ee <main>:
volatile uint8_t a = 0;

int main(void)
{
	
    port_init(); //initializes the ports
 1ee:	0e 94 79 00 	call	0xf2	; 0xf2 <port_init>
    timer0_init(); //initializes timer 0
 1f2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <timer0_init>
	timer2_init(); //intializes timer 2
 1f6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <timer2_init>
	sei();//turns interrupts on
 1fa:	78 94       	sei
	
    while (1) 
    {
		if (a > 0){
 1fc:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 200:	88 23       	and	r24, r24
 202:	e1 f3       	breq	.-8      	; 0x1fc <main+0xe>
			keypad_check();
 204:	0e 94 85 00 	call	0x10a	; 0x10a <keypad_check>
			a = 0;
 208:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <__data_end>
 20c:	f7 cf       	rjmp	.-18     	; 0x1fc <main+0xe>

0000020e <__vector_15>:
		}
    }
}

ISR (TIMER0_COMPB_vect)
{
 20e:	1f 92       	push	r1
 210:	0f 92       	push	r0
 212:	0f b6       	in	r0, 0x3f	; 63
 214:	0f 92       	push	r0
 216:	11 24       	eor	r1, r1
	LEDOFF;
 218:	2d 98       	cbi	0x05, 5	; 5
}
 21a:	0f 90       	pop	r0
 21c:	0f be       	out	0x3f, r0	; 63
 21e:	0f 90       	pop	r0
 220:	1f 90       	pop	r1
 222:	18 95       	reti

00000224 <__vector_14>:

ISR (TIMER0_COMPA_vect)
{
 224:	1f 92       	push	r1
 226:	0f 92       	push	r0
 228:	0f b6       	in	r0, 0x3f	; 63
 22a:	0f 92       	push	r0
 22c:	11 24       	eor	r1, r1
	LEDON;
 22e:	2d 9a       	sbi	0x05, 5	; 5
}
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <__vector_7>:

ISR (TIMER2_COMPA_vect)
{
 23a:	1f 92       	push	r1
 23c:	0f 92       	push	r0
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	0f 92       	push	r0
 242:	11 24       	eor	r1, r1
 244:	8f 93       	push	r24
	//LEDON;
	a++;
 246:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
}
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
